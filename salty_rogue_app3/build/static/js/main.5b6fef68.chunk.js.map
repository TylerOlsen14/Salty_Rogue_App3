{"version":3,"sources":["logo.jpg","components/Navbar.js","components/CreatePhoneRecord.js","components/CallList.js","components/EditPhoneRecord.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","react_router_dom","className","href","class","src","Logo","alt","Component","URL","CreatePhoneRecord","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","client_name","client_phonenumber","client_conversation","client_postcard","fireRedirect","handleSubmit","e","preventDefault","newClient","console","log","axios","post","then","res","data","setState","onChangeClientName","target","defineProperty","name","onChangeClientPhoneNumber","onChangeClientConversation","onChangeClientPostcard","props","location","from","onSubmit","type","placeholder","onChange","react_router","to","Client","client","_id","CallList","clients","_this2","get","response","catch","error","map","currentClient","i","CallList_Client","style","marginTop","clientList","EditPhoneRecord","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","recordID","wrap","_context","prev","next","match","params","id","fetch","json","UpdatedPhoneRecord","PhoneRecordOriginal","stop","_ref2","_callee2","newUpdate","_context2","JSON","stringify","method","body","headers","Content-Type","history","push","_x","handleDelete","_ref3","_callee3","_context3","_x2","pathname","align","PostCard","handleChange","onClick","App","components_Navbar","exact","path","component","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b6fef68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.52b14cf9.jpg\";","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Logo from '../logo.jpg';\nimport \"../App.css\";\n\nexport class Navbar extends Component {\n  render() {\n    return (\n    <Router>\n    <div>\n        <nav className=\"navbar\">\n            <a href=\"/\" class=\"nav-link\">\n                <img src={Logo} alt=\"Salt Rogue Real Estate\"/> \n            </a>\n            <ul>\n                <li className=\"nav-item\">\n                    <button>\n                        <a href=\"/\" class=\"nav-link\">Phone Call List</a>\n                    </button>\n                </li>\n                {/* <li className=\"nav-item\">\n                    <a href=\"/CallList\">Phone Call List</a>\n                </li> */}\n                <li className=\"nav-item\">\n                    <button>\n                        <a href=\"/CreatePhoneRecord\" class=\"nav-link\">New Call Record</a>\n                    </button>\n                </li>\n            </ul>\n            {/* </div> */}\n        </nav>\n    </div>\n    </Router>\n    )\n  }\n}\n\nexport default Navbar\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from 'react-router'\n// import NewPhoneRecord from './NewPhoneRecord';\nconst URL = \"mongodb://Tucker:Tucker@cluster0-shard-00-00-tihhu.mongodb.net:27017,cluster0-shard-00-01-tihhu.mongodb.net:27017,cluster0-shard-00-02-tihhu.mongodb.net:27017/ReactPhoneRecords?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true\"\n\nexport class CreatePhoneRecord extends Component {\n  // constructor() {\n    // this.state = {\n    state = {\n      client_name: \"\",\n      client_phonenumber: \"\",\n      client_conversation: \"\",\n      client_postcard: false,\n      fireRedirect: false\n    };\n  // }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newClient = {\n      client_name: this.state.client_name,\n      client_phonenumber: this.state.client_phonenumber,\n      client_conversation: this.state.client_conversation,\n      client_postcard: this.state.client_postcard\n    };\n    console.log(newClient);\n    console.log(`Form submitted:`);\n    console.log(`Client name: ${this.state.client_name}`);\n    console.log(`Client Phone Number: ${this.state.client_phonenumber}`);\n    console.log(`Client Postcard: ${this.state.client_conversation}`);\n\n    // axios.post(\"mongodb://Tucker:Tucker@cluster0-shard-00-00-tihhu.mongodb.net:27017,cluster0-shard-00-01-tihhu.mongodb.net:27017,cluster0-shard-00-02-tihhu.mongodb.net:27017/ReactPhoneRecords?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true\", newClient)\n    axios\n      .post(URL, newClient)\n      .then(res => console.log(res.data));\n\n    this.setState({\n      client_name: \"\",\n      client_phonenumber: \"\",\n      client_conversation: \"\",\n      client_postcard: false,\n      fireRedirect: true,\n    });\n    //router link\n  };\n\n  onChangeClientName = e => {\n    console.log(e.target.value);\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onChangeClientPhoneNumber = e => {\n    console.log(e.target.value);\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onChangeClientConversation = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  onChangeClientPostcard = e => {\n    console.log(e.target);\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  render() {\n    const { from } = this.props.location.state || '/'\n    const { fireRedirect } = this.state\n    return (\n      <div className=\"form-group\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label>Client Name:</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"Client Name\"\n              name=\"client_name\"\n              //   value={this.state.client_name}\n              onChange={this.onChangeClientName}\n            />\n          </div>\n          <div class=\"form-group\">\n            <label>Client Phone Number:</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"Client Phone Number\"\n              name=\"client_phonenumber\"\n              //   value={this.state.client_phonenumber}\n              onChange={this.onChangeClientPhoneNumber}\n            />\n          </div>\n          <div class=\"form-group\">\n            <label>Conversation: </label>\n            <textarea\n              class=\"form-control\"\n              placeholder=\"Details about the conversation\"\n              name=\"client_conversation\"\n              //   value={this.state.client_conversation}\n              onChange={this.onChangeClientConversation}\n            />\n          </div>\n          <div class=\"input-group\">\n            <div class=\"input-group-prepend\">\n              <div\n                class=\"input-group-text\"\n                onChange={this.onChangeClientPostcard}\n                name=\"client_postcard\"\n              >\n                <label>PostCard sent to client?</label>\n                Yes <input type=\"radio\" name=\"client_postcard\" value=\"true\" />\n                No <input type=\"radio\" name=\"client_postcard\" value=\"false\" />\n              </div>\n            </div>\n          </div>\n          <div>\n            <input type=\"submit\" value=\"Submit\" />\n          </div>\n          {fireRedirect && (\n            <Redirect to='/' />\n            /*{ <Redirect to={from || '/'} /> }*/\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreatePhoneRecord;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\n\nconst Client = props => (\n  <tr>\n    <td>\n      {props.client.client_name}\n    </td>\n    <td>\n      {props.client.client_phonenumber}\n    </td>\n    <td>\n      {props.client.client_conversation}\n    </td>\n    <td>\n      {props.client.client_postcard}\n    </td>\n    <td>\n      <Link to={\"./EditPhoneRecord/\"+props.client._id}>Edit</Link>\n    </td>\n  </tr>\n)\n\nexport class CallList extends Component {\n\n  constructor(props) {\n  super(props);\n  this.state = {clients: []};\n}\n\n// componentDidMount() {\n//   return fetch (`url`)\n//     function\n//       method: \"GET\", \n//       mode: \"cors\"\n// }\n\ncomponentDidMount() {\n  axios.get('http://localhost:4000/clients/')\n      .then(response => {\n          this.setState({ clients: response.data });\n      })\n      .catch(function (error){\n          console.log(error);\n      })\n}\n\nclientList() {\n  return this.state.clients.map(function(currentClient, i){\n      return <Client client={currentClient} key={i} />;\n  })\n}\n\n  render() {\n    return (\n      <div>\n        <h3>Client List</h3>\n          <table className=\"table table-striped\" style={{ marginTop: 20 }} >\n            <thead>\n              <tr>\n                <th>Client Name: </th>\n                <th>Client PhoneNumber: </th>\n                <th>Conversation summary: </th>\n                <th>Postcard? </th>\n              </tr>\n            </thead>\n            <tbody>\n              { this.clientList() }\n            </tbody>\n          </table>\n      </div>\n    )\n  }\n}\n\nexport default CallList\n","import React, { Component } from 'react';\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport class EditPhoneRecord extends Component {\n  constructor(props){\n    super(props);\n\n    this.state= {\n      pathname: this.props.location.pathname,\n      UpdatedPhoneRecord: [],\n      PhoneRecordOriginal: [],\n      client_name: [],\n      client_phonenumber: [],\n      client_conversation: [],\n      client_postcard: [],\n    }\n  }\n\n  componentDidMount = async () => {\n    const recordID=this.props.match.params.id\n    console.log(recordID)\n    console.log(`http://localhost:4000/clients/${recordID}`)\n    await fetch(`http://localhost:4000/clients/${recordID}`)\n      .then(res => res.json())\n      .then(response => {\n        this.setState({UpdatedPhoneRecord: response})\n        this.setState({PhoneRecordOriginal: response})\n        this.setState({client_name: response.client_name})\n        this.setState({client_phonenumber: response.client_phonenumber})\n        this.setState({client_conversation: response.client_conversation})\n        this.setState({client_postcard: response.client_postcard})\n        console.log(response)\n      })\n  };\n  \n  // handleChange = async (e) => {\n  //   await this.setState({\n  //       // client_name: response.client_name,\n  //       // client_phonenumber: response.client_phonenumber,\n  //       // client_conversation: response.client_conversation,\n  //       // client_postcard: response.client_postcard\n  //   }, console.log(this.state.UpdatedPhoneRecord));\n  //   const NewRecord = this.state.UpdatedPhoneRecord\n  //   const UpdatedRecord = Object.assign(this.state.PhoneRecordOriginal, NewRecord)\n  //   this.setState({UpdatedPhoneRecord : UpdatedRecord})\n  // };\n\n  handleSubmit = async (e) => {\n    e.preventDefault()\n    const recordID=this.props.match.params.id\n    const newUpdate = {\n      client_name: this.state.client_name,\n      client_phonenumber: this.state.client_phonenumber,\n      client_conversation: this.state.client_conversation,\n      client_postcard: this.state.client_postcard,\n    }\n    const data = JSON.stringify(newUpdate)\n    console.log(data)\n    console.log('Fetch', recordID)\n    await fetch(`http://localhost:4000/clients/${recordID}`, {\n        method: \"PUT\",\n        body: data,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    console.log(data)\n      this.props.history.push('/')\n  };\n\n  handleDelete = async (e) => {\n    console.log(e)\n    e.preventDefault()\n    const recordID = this.props.match.params.id\n    console.log(recordID)\n    await fetch(`http://localhost:4000/clients/${recordID}`, {\n      method: \"DELETE\"\n    });\n    this.props.history.push('/')\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 align=\"center\">Update Call Record</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <div className=\"form-group\">\n              <label>Name: </label>\n              <textarea \n                type=\"text\"\n                className=\"form-control\"\n                name=\"Client_Name\"\n                value={this.state.client_name}\n                placeholder={this.state.PhoneRecordOriginal.client_name}\n                // onChange={this.handleChange}\n                onChange={(e) => this.setState({client_name: e.target.value})}\n                />\n            </div>\n            <div className=\"form-group\">\n              <label>PhoneNumber: </label>\n              <textarea \n                type=\"text\"\n                className=\"form-control\"\n                value={this.state.client_phonenumber}\n                placeholder={this.state.PhoneRecordOriginal.client_phonenumber}\n                name=\"Client_PhoneNumber\"\n                // onChange={this.handleChange}\n                onChange={(e) => this.setState({client_phonenumber: e.target.value})}\n                />\n            </div>\n            <div className=\"form-group\">\n              <label>Conversation: </label>\n              <textarea \n                type=\"text\"\n                className=\"form-control\"\n                value={this.state.client_conversation}\n                placeholder={this.state.PhoneRecordOriginal.client_conversation}\n                name=\"Client_Conversation\"\n                onChange={(e) => this.setState({client_conversation: e.target.value})}\n                />\n            </div>\n            <div className=\"form-group\">\n              <label>PostCard sent to client?</label>\n              <select name=\"PostCard\" id=\"PostCard\" className=\"form-control\" value={this.state.UpdatedPhoneRecord.PostCard} onChange={this.handleChange} placeholder=\"PostCard\">\n                <option value=\"true\">Yes</option>\n                <option value=\"false\">No</option>\n              </select>\n            </div>\n            <br/>\n            <div className=\"form-group\">\n              <button type=\"submit\" value=\"UpdatePhoneRecord\" className=\"btn btn-primary\" name=\"submit\" id=\"submit\" onClick={this.handleSubmit}>Submit</button>\n              <button type=\"submit\" value=\"DeletePhoneRecord\" className=\"btn btn-danger\" name=\"delete\" id=\"delete\" onClick={this.handleDelete}>Delete</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default EditPhoneRecord\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Navbar from './components/Navbar';\n\nimport CreatePhoneRecord from './components/CreatePhoneRecord'\nimport CallList from './components/CallList'\nimport EditPhoneRecord from './components/EditPhoneRecord'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar/>\n          <Route exact path=\"/\" component={CallList} />\n          <Route path=\"/EditPhoneRecord/:id\" component={EditPhoneRecord} />\n          <Route path=\"/CreatePhoneRecord\" component={CreatePhoneRecord} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}